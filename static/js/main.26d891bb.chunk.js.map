{"version":3,"sources":["img/img2.jpg","img/img1.jpg","img/img3.jpg","components/Scene.js","shaders/Vertex.js","shaders/Fragment.js","components/VisibilitySensor.js","App.js","reportWebVitals.js","index.js"],"names":["Scene","props","setupResize","window","addEventListener","resize","a1","a2","width","container","offsetWidth","height","offsetHeight","renderer","setSize","camera","aspect","console","log","imageAspect","material","uniforms","resolution","value","x","y","z","w","dist","position","fov","Math","PI","atan","plane","scale","updateProjectionMatrix","state","textures","current","start","bind","stop","animate","this","scene","THREE","mount","clientWidth","clientHeight","setClearColor","physicallyCorrectLights","outputEncoding","load","img1","img2","img3","document","getElementById","appendChild","domElement","set","mouse","prevsmouse","time","targetSpeed","addObjects","mouseEvents","mouseMoveEvent","isPushed","setPushed","direction","gsap","to","progress","duration","speed","sqrt","len","length","nextTexture","texture","e","clientX","clientY","side","type","activeIndex","uvRate1","vertexShader","fragmentShader","geometry","add","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","getSpeed","renderScene","render","id","ref","Component","VisibilitySensor","active","once","children","otherProps","onChange","isVisible","setState","items","title","description","App","React","useState","setActiveIndex","setIsPushed","className","href","pages","map","item","index","offset","factor","partialVisibility","visible","delay","opacity","transform","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM"],"mappings":"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","file":"static/js/main.26d891bb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/img2.90722986.jpg\";","export default __webpack_public_path__ + \"static/media/img1.88e9a5cc.jpg\";","export default __webpack_public_path__ + \"static/media/img3.53b2b0cd.jpg\";","import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { vertex } from \"../shaders/Vertex\";\nimport { fragment } from \"../shaders/Fragment\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport img2 from \"../img/img2.jpg\";\nimport img1 from \"../img/img1.jpg\";\nimport img3 from \"../img/img3.jpg\";\nimport gsap from \"gsap\";\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textures: [],\n\n      current: 0,\n    };\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer();\n\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.renderer.setClearColor(0x000000, 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n    this.textures = [\n      new THREE.TextureLoader().load(img1),\n      new THREE.TextureLoader().load(img2),\n      new THREE.TextureLoader().load(img3),\n    ];\n    this.container = document.getElementById(\"scene\");\n\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.width / this.height,\n      0.1,\n      1000\n    );\n    this.current = 0;\n\n    this.camera.position.set(0, 0, 4);\n    // this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.mouse = new THREE.Vector2();\n    this.prevsmouse = new THREE.Vector2();\n    this.time = 0;\n    this.targetSpeed = 0;\n    this.setupResize();\n    this.addObjects();\n    this.resize();\n    this.mouseEvents();\n    this.animate();\n    this.mouseMoveEvent();\n  }\n\n  mouseEvents() {\n    /*  document.addEventListener(\"mousedown\", () => {\n        console.log(\"click\")\n        this.next()\n    }) */\n    document.addEventListener(\"click\", () => {\n      if (this.props.isPushed) {\n        console.log(this.props.isPushed)\n        this.props.setPushed(false)\n        console.log(this.props.isPushed)\n        this.material.uniforms.direction.value = 0;\n        gsap.to(this.material.uniforms.progress, {\n          value: 1,\n          duration: 0.5,\n        });\n      } else {\n        console.log(this.props.isPushed)\n        this.props.setPushed(true)\n        console.log(this.props.isPushed)\n        this.material.uniforms.direction.value = 1;\n        gsap.to(this.material.uniforms.progress, {\n          value: 0,\n          duration: 0.5,\n        });\n        \n      }\n  \n    });\n\n/*     document.addEventListener(\"mouseup\", () => {\n      this.props.setPushed(false)\n      this.material.uniforms.direction.value = 1;\n      gsap.to(this.material.uniforms.progress, {\n        value: 0,\n        duration: 0.5,\n      });\n    }); */\n  }\n\n  getSpeed() {\n    this.speed = Math.sqrt(\n      (this.prevsmouse.x - this.mouse.x) ** 2 +\n        (this.prevsmouse.y - this.mouse.y) ** 2\n    );\n\n    this.targetSpeed += 0.1 * (this.speed - this.targetSpeed);\n    this.prevsmouse.x = this.mouse.x;\n    this.prevsmouse.y = this.mouse.y;\n  }\n\n  next() {\n    let len = this.textures.length;\n    let nextTexture = this.textures[(this.current + 1) % len];\n    console.log(nextTexture);\n    console.log(\"nextTexture\");\n    this.current++;\n    this.material.uniforms.texture.value = nextTexture;\n  }\n\n  mouseMoveEvent() {\n    document.addEventListener(\"mousemove\", (e) => {\n      //console.log(e);\n      this.mouse.x = e.clientX / this.width;\n      this.mouse.y = 1 - e.clientY / this.height;\n\n      this.material.uniforms.mouse.value = this.mouse;\n    });\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        progress: { type: \"f\", value: 0 },\n        speed: { type: \"f\", value: 0 },\n        mouse: { type: \"v2\", value: new THREE.Vector2(0, 0) },\n        direction: { type: \"f\", value: 0 },\n        texture: { type: \"t\", value: this.textures[this.props.activeIndex] },\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    this.geometry = new THREE.PlaneGeometry(1, 1, 100, 100);\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n\n    // this.scene.add(this.cube);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 853 / 1280;\n\n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2 * (180 / Math.PI) * Math.atan(height / (2 * dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    //this.cube.rotation.x += 0.01;\n    //this.cube.rotation.y += 0.01;\n\n    this.time += 0.05;\n    this.getSpeed();\n    this.material.uniforms.texture.value = this.textures[this.props.activeIndex];\n    this.material.uniforms.time.value = this.time;\n    this.material.uniforms.speed.value = this.targetSpeed;\n    this.frameId = requestAnimationFrame(this.animate);\n    this.renderScene();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n     \n        <div\n          id=\"scene\"\n          ref={(mount) => {\n            this.mount = mount;\n          }}\n        />\n \n    );\n  }\n}\n\nexport default Scene;\n","export var vertex = `\n\nuniform float time;\nuniform float progress;\nuniform float direction;\nvarying vec2 vUv;\nvarying vec4 vPosition;\nuniform vec2 pixels;\n\nvoid main()\t{\n\n    vec3 pos = position;\n\n    //pos.z = 0.1*sin(pos.x * 10.);\n\n    float distance = length(uv - vec2(0.5));\n\n    float maxdist = length(vec2(0.5));\n\n\n    float normalizedDistance = distance / maxdist;\n\n    float stickTo = normalizedDistance;\n    float stickOut = -normalizedDistance;\n\n    float stickEffect = mix(stickTo, stickOut, direction);\n\n    float myProgress = min(2.*progress, 2.*(1. - progress));\n\n    float zOffset = 2.;\n\n    float zProgress = mix(clamp(2. * progress,0.,1.),clamp(1. - 2. * (1. - progress),0.,1.), direction);\n\n    pos.z += zOffset *  (stickEffect * myProgress -zProgress);\n\n    pos.z += progress * sin(distance * 10. + 2. * time)* 0.1;\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n\n}\n`;\n","\nexport var fragment = `\n\nuniform float time;\nuniform float progress;\nuniform float speed;\nuniform vec2 mouse;\nuniform float direction;\nuniform sampler2D texture;\nuniform sampler2D texture2;\nuniform vec4 resolution;\nvarying vec2 vUv;\nvarying vec4 vPosition;\n\n\nvoid main()\t{\n    float normSpeed = clamp(speed*40.,0.,1.);\n    float mouseDist = length(vUv - mouse);\n\n    float c = smoothstep(0.2*normSpeed, 0., mouseDist);\n    vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n    vec4 color1 = texture2D(texture, newUV);\n\n    float r = texture2D(texture, newUV + 0.1 * 0.5 * c*normSpeed).r;\n    float g = texture2D(texture, newUV + 0.1 * 0.3 * c*normSpeed).g;\n    float b = texture2D(texture, newUV + 0.1 * 0.1 * c*normSpeed).b;\n\n    gl_FragColor = vec4(vUv, 0.0,1.);\n    gl_FragColor = color1;\n\n    gl_FragColor = vec4(normSpeed * mouseDist,0., 0.,1.);\n    gl_FragColor = vec4(c,0., 0.,1.);\n    gl_FragColor = vec4(r,g, b,1.);\n}\n`;","import React, { Component } from \"react\";\n\nimport VSensor from \"react-visibility-sensor\";\n\nclass VisibilitySensor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: true\n    };\n  }\n\n  render() {\n    const { active } = this.state;\n    const { once, children, ...otherProps } = this.props;\n    return (\n      <VSensor\n        active={active}\n        onChange={isVisible => {\n          once &&\n            isVisible &&\n            this.setState({ active: false }, () =>\n              console.log(\"turned the things off\")\n            );\n        }}\n        {...otherProps}\n      >\n        {({ isVisible }) => children({ isVisible })}\n      </VSensor>\n    );\n  }\n}\n\n\n\nexport default VisibilitySensor;\n","import React, { useRef, useEffect, useCallback } from \"react\";\nimport { Parallax, ParallaxLayer } from \"react-spring/renderprops-addons\";\nimport Scene from \"./components/Scene\";\nimport VisibilitySensor from \"./components/VisibilitySensor\";\nimport { Spring } from \"react-spring/renderprops\";\n\nimport \"./App.css\";\n\nconst items = [\n  {\n    title: \"Lorem ipsum dolor\",\n    description:\n      \"Nulla vestibulum orci eu nunc pharetra accumsan. Mauris et nulla tempus, volutpat purus eget, bibendum est.\",\n  },\n  {\n    title: \"Mauris mollis\",\n    description:\n      \"Malesuada nibh euismod ac. Ut bibendum felis justo, vitae vehicula ex mattis vitae. Quisque vulputate justo varius odio viverra\",\n  },\n  {\n    title: \"Duis vitae\",\n    description:\n      \"Morbi pharetra erat nec quam viverra pretium. Nullam in massa et mi condimentum pharetra vitae et risus\",\n  },\n];\n\nvar colorArray = [\n  \"#FF6633\",\n  \"#FFB399\",\n  \"#FF33FF\",\n  \"#FFFF99\",\n  \"#00B3E6\",\n  \"#E6B333\",\n  \"#3366E6\",\n];\n\nfunction App() {\n  const [activeIndex, setActiveIndex] = React.useState(0);\n  const [isPushed, setIsPushed] = React.useState(false);\n  let parallax;\n\n  function onChange(visible, index) {\n    console.log(visible);\n    console.log(index);\n    if (visible) {\n      setActiveIndex(index);\n    }\n  }\n\n  function setPushed(state) {\n    setIsPushed(state);\n    console.log(isPushed);\n  }\n  return (\n    <>\n      <div className=\"frame\">\n        <h1 className=\"frame__title\">Click Webgl Shader</h1>\n        <div className=\"frame__links\"></div>\n        <div className=\"frame__nav\">\n          <a\n            className=\"frame__link\"\n            href=\"https://isengupt.github.io/fiber-website/\"\n          >\n            Previous\n          </a>\n          <a className=\"frame__link\" href=\"#\">\n            Resume\n          </a>\n          <a\n            className=\"frame__link\"\n            href=\"https://github.com/isengupt/full-distortion\"\n          >\n            GitHub\n          </a>\n        </div>\n      </div>\n      <div className=\"container\">\n        <Scene\n          activeIndex={activeIndex}\n          isPushed={isPushed}\n          setPushed={setIsPushed}\n        />\n        <Parallax pages={3} ref={(ref) => (parallax = ref)}>\n          {items.map((item, index) => (\n            <div>\n              <ParallaxLayer\n                offset={index}\n                speed={1.2}\n                factor={1}\n                className=\"parallax__main\"\n                key={index}\n              >\n                <VisibilitySensor\n                  partialVisibility\n                  onChange={(e) => onChange(e, index)}\n                >\n                  {({ isVisible }) => (\n                    <Spring\n                      delay={0}\n                      to={{\n                        opacity: isVisible ? 1 : 0,\n                        transform: isVisible\n                          ? \"translateY(0)\"\n                          : \"translateY(-100px)\",\n                      }}\n                    >\n                      {(props) => (\n                        <>\n                          <h2 style={{ ...props }}>{item.title}</h2>\n                          <p style={{ ...props }}>{item.description}</p>\n                        </>\n                      )}\n                    </Spring>\n                  )}\n                </VisibilitySensor>\n              </ParallaxLayer>\n            </div>\n          ))}\n        </Parallax>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <App />\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}